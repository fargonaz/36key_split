/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "mouse.dtsi"
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // left-hand keys
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // right-hand keys
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // thumb keys

// key-position labels
#define BASE     0
#define COLEMAK  1
#define LOWER    2
#define UPPER    3
#define FUNCTION 4 
#define META     5

/ {
    keymap {
        compatible = "zmk,keymap";
        BASE {
            display-name = "Base";
            bindings = <
&kp Q           &kp W        &kp E        &kp R        &kp T         &kp Y         &kp U        &kp I        &kp O        &kp P
&kp A           &kp S        &kp D        &kp F        &kp G         &kp H         &kp J        &kp K        &kp L        &kp SEMI
&kp Z           &kp X        &kp C        &kp V        &kp B         &kp N         &kp M        &kp COMMA    &kp DOT      &kp SLASH
                             &kp BSPC     &lt 4 ESC    &mo LOWER     &kp ENTER     &kp SPACE    &kp SQT
            >;
        };

        COLEMAK {
            display-name = "colemak";
            bindings = <
&kp Q           &kp W       &kp F        &kp P        &kp D          &kp J  &kp L        &kp U        &kp Y       &kp SEMI
&hml LEFT_GUI A &hml LALT R &hml LCTRL S &hml LSHFT T &kp G          &kp H  &hmr RSHFT N &hmr LCTRL E &hmr LALT I &hmr RGUI O
&mt TAB Z       &kp X       &kp C        &kp V        &kp B          &kp K  &kp M        &kp COMMA    &kp DOT     &kp SLASH
                            &trans       &trans       &trans         &trans &trans       &trans
            >;
        };

        LOWER {
            display-name = "Lower";
            bindings = <
&kp EXCL      &kp AT       &kp HASH      &kp LBKT      &kp RBKT       &kp PLUS  &mt F7 N7 &mt F8 N8 &mt F9 N9 &mt F10 N0
&trans        &kp TILDE    &kp DQT       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS &mt F4 N4 &mt F5 N5 &mt F6 N6 &kp UNDER
&trans        &kp CAPS     &kp LC(LS(C)) &kp LC(LS(V)) &kp BSLH       &kp EQUAL &mt F1 N1 &mt F2 N2 &mt F3 N3 &kp TILDE
                           &trans        &trans        &trans         &trans    &trans      &trans
            >;
        };

        UPPER {
            display-name = "Upper";
            bindings = <
&trans         &mkp LCLK      &trans         &mkp RCLK       &trans   &trans    &mkp LCLK   &mkp RCLK   &trans &trans
&msc SCRL_UP   &mmv MOVE_LEFT &mmv MOVE_UP   &mmv MOVE_RIGHT &trans   &trans    &trans      &trans      &trans &trans
&msc SCRL_DOWN &msc SCRL_LEFT &mmv MOVE_DOWN &msc SCRL_RIGHT &trans   &trans    &trans      &trans      &trans &trans
                              &trans         &trans          &trans   &trans    &trans      &trans
            >;
        }; 

        FUNCTION {
            display-name = "Function";
            bindings = <
&kp TAB        &trans      &kp END &trans   &sys_reset      &trans    &trans    &kp INS  &trans    &kp PG_UP
&kp ESC        &trans      &kp DEL &kp LS(SEMI)  &bootloader      &kp HOME  &kp LEFT  &kp UP   &kp DOWN  &kp RIGHT
&studio_unlock &trans      &trans  &trans  &trans            &trans    &trans    &trans   &trans    &kp PG_DN
                           &trans  &trans  &trans            &trans    &trans    &trans
            >;
        };
    };
};


/* left-hand HRMs */
ZMK_HOLD_TAP(hml,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;                // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)

/* right-hand HRMs */
ZMK_HOLD_TAP(hmr,
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;       // repeat on tap-into-hold
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS>;
    hold-trigger-on-release;             // delay positional check until key-release
)
/* / {
    combos {
      compatible = "zmk,combos";
        combo_mouse {
            timeout-ms = <250>;
            require-prior-idle-ms = <100>;
            key-positions = <LB1 LB0>;
            key-positions = <LB1 LB0>;
            bindings = <&tog 3>;
        };
        combo_upper {
            timeout-ms = <250>;
            require-prior-idle-ms = <100>;
            key-positions = <RT1 RT0>;
            bindings = <&tog 1>;
        };
    };
}; */

 #define COMBO(NAME, BINDINGS, KEYPOS, LAYERS, TERM, QUICKTAP, ...) \
    combo_##NAME { \
        timeout-ms = <TERM>; \
        bindings = <BINDINGS>; \
        key-positions = <KEYPOS>; \
        layers = <LAYERS>; \
        require-prior-idle-ms = <QUICKTAP>; \
        __VA_ARGS__ \
    };
/*                              36 KEY MATRIX / LAYOUT MAPPING

  ╭────────────────────┬────────────────────╮ ╭─────────────────────┬─────────────────────╮
  │  0   1   2   3   4 │  5   6   7   8   9 │ │ LT4 LT3 LT2 LT1 LT0 │ RT0 RT1 RT2 RT3 RT4 │
  │ 10  11  12  13  14 │ 15  16  17  18  19 │ │ LM4 LM3 LM2 LM1 LM0 │ RM0 RM1 RM2 RM3 RM4 │
  │ 20  21  22  23  24 │ 25  26  27  28  29 │ │ LB4 LB3 LB2 LB1 LB0 │ RB0 RB1 RB2 RB3 RB4 │
  ╰───────╮ 30  31  32 │ 33  34  35 ╭───────╯ ╰───────╮ LH2 LH1 LH0 │ RH0 RH1 RH2 ╭───────╯
          ╰────────────┴────────────╯                 ╰─────────────┴─────────────╯             */
/ {
    combos {
      compatible = "zmk,combos";
COMBO(mouse,     &tog 3,               LB1 LB0,    COLEMAK UPPER,        250, 100)
COMBO(upper,     &tog 1,               RT3 RT4,    BASE COLEMAK,         250, 100)
COMBO(l_par,     &kp LEFT_PARENTHESIS,  LT1 LT0,    COLEMAK,              250, 100)
COMBO(r_par,     &kp RIGHT_PARENTHESIS, RT1 RT0,    COLEMAK,              250, 100)
COMBO(l_brck,    &kp LBKT,              LM1 LM0,    COLEMAK,              250, 100)
COMBO(r_brck,    &kp RBKT,              RM1 RM0,    COLEMAK,              250, 100)
COMBO(l_brace,   &kp LBRC,              LM0 LT0,    COLEMAK,              250, 100)
COMBO(r_brace,   &kp RBRC,              RM0 RT0,    COLEMAK,              250, 100)
COMBO(lf_mkp,    &mkp LCLK,             LT3 LT2,    COLEMAK,              250, 100)
COMBO(rf_mkp,    &mkp RCLK,             LT2 LT1,    COLEMAK,              250, 100)
    };
};

